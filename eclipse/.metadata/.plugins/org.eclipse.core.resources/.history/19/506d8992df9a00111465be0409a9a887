package net.minecraft.src.wifi.network;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import net.minecraft.src.World;
import net.minecraft.src.mod_WirelessRedstone;
import net.minecraft.src.wifi.BlockRedstoneWireless;
import net.minecraft.src.wifi.TileEntityRedstoneWireless;
import net.minecraft.src.wifi.TileEntityRedstoneWirelessR;
import net.minecraft.src.wifi.TileEntityRedstoneWirelessT;
import net.minecraft.src.wifi.WirelessRedstone;


public class PacketRedstoneEther extends PacketWifiSMP {
	public boolean state = false;
	
	public PacketRedstoneEther() {
		super(PacketIds.WIFI_ETHER);
	}
	
	public PacketRedstoneEther(String command) {
		this();
		this.payload = getPayloadWithCommand(command);
	}
	
	public PacketRedstoneEther(TileEntityRedstoneWireless entity, World world)
	{
		this();
		this.xPosition = entity.getBlockCoord(0);
		this.yPosition = entity.getBlockCoord(1);
		this.zPosition = entity.getBlockCoord(2);
		String command = "";
		if ( entity instanceof TileEntityRedstoneWirelessR) {
			this.state = ((BlockRedstoneWireless)WirelessRedstone.blockWirelessR).getState(world, this.xPosition, this.yPosition, this.zPosition);
			command = "addReceiver";
		} else if ( entity instanceof TileEntityRedstoneWirelessT) {
			this.state = ((BlockRedstoneWireless)WirelessRedstone.blockWirelessT).getState(world, this.xPosition, this.yPosition, this.zPosition);
			command = "addTransmitter";
		}
		if (command != "") this.payload = getPayloadWithCommand(command);
	}
	
	public PacketRedstoneEther(TileEntityRedstoneWireless entity)
	{
		this();
		this.xPosition = entity.getBlockCoord(0);
		this.yPosition = entity.getBlockCoord(1);
		this.zPosition = entity.getBlockCoord(2);
		PacketPayload p = new PacketPayload(1,1,2);
		int[] dataInt = new int[1];
		float[] dataFloat = new float[1];
		String[] dataString = new String[2];
		dataInt[0] = 0;
		dataFloat[0] = 0;
		dataString[0] = entity.getFreq();
		dataString[1] = "fetchTile";
		p.intPayload = dataInt;
		p.floatPayload = dataFloat;
		p.stringPayload = dataString;
		this.payload = p;
	}
	
	public PacketPayload getPayloadWithCommand(String command)
	{
		PacketPayload p = new PacketPayload(1,1,4);
		// Frequency
		p.stringPayload[0] = "";
		// Command
		p.stringPayload[1] = command;
		// Power Direction
		p.stringPayload[2] = "";
		// Indirectly Power
		p.stringPayload[3] = "";
		p.intPayload[0] = 0;
		p.floatPayload[0] = 0;
		return p;
	}

	public String toString() {
		return this.payload.stringPayload[1]+"("+xPosition+","+yPosition+","+zPosition+")["+this.payload.stringPayload[0]+"]:"+state;
	}
	
	public String getFreq()
	{
		return this.payload.stringPayload[0];
	}
	
	public String getCommand()
	{
		return this.payload.stringPayload[1];
	}
	
	public String getPowerDirections()
	{
		return this.payload.stringPayload[2];
	}
	
	public String getInDirectlyPowering()
	{
		return this.payload.stringPayload[3];
	}
	
	public void setPosition(int i, int j, int k) {
		this.xPosition = i;
		this.yPosition = j;
		this.zPosition = k;
	}

	public void setFreq(Object freq) {
		this.payload.stringPayload[0] = freq.toString();
	}

	public void setState(boolean state) {
		this.state = state;
	}

	@Override
	public void readData(DataInputStream datainputstream)
			throws IOException {
		super.readData(datainputstream);
		state = datainputstream.readBoolean();
	}

	@Override
	public void writeData(DataOutputStream dataoutputstream)
			throws IOException {
		super.writeData(dataoutputstream);
		dataoutputstream.writeBoolean(state);
	}
	
}
