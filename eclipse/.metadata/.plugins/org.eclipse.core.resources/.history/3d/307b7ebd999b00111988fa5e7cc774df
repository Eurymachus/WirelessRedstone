package net.minecraft.src.wifi.network;

import java.util.Arrays;

import net.minecraft.src.ModLoader;
import net.minecraft.src.wifi.LoggerRedstoneWireless;

public class PacketPayload
{
	public static <T> T[] concat(T[] first, T[] second) {
		  T[] result = Arrays.copyOf(first, first.length + second.length);
		  System.arraycopy(second, 0, result, first.length, second.length);
		  return result;
	}
	
	public static int[] concat(int[] first, int[] second) {
		  int[] result = Arrays.copyOf(first, first.length + second.length);
		  System.arraycopy(second, 0, result, first.length, second.length);
		  return result;
	}
	
	public static float[] concat(float[] first, float[] second) {
		  float[] result = Arrays.copyOf(first, first.length + second.length);
		  System.arraycopy(second, 0, result, first.length, second.length);
		  return result;
	}
	
	public static boolean[] concat(boolean[] first, boolean[] second) {
		  boolean[] result = Arrays.copyOf(first, first.length + second.length);
		  System.arraycopy(second, 0, result, first.length, second.length);
		  return result;
	}
	
	private int[] intPayload;
	private float[] floatPayload;
	private String[] stringPayload;
	private boolean[] boolPayload;

	public PacketPayload() {}
	

	
	public void setIntPayload(int index, int newInt) {
		if (this.intPayload != null && index <= this.intPayload.length)
		{
			this.intPayload[index] = newInt;
		}
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getIntPayload("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
	}
	
	public void setFloatPayload(int index, float newFloat) {
		if (this.floatPayload != null && index <= this.floatPayload.length)
			this.floatPayload[index] = newFloat;
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getFloat("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
	}
	
	public void setStringPayload(int index, String newString) {
		if (this.stringPayload != null && index <= this.stringPayload.length)
			this.stringPayload[index] = newString;
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getString("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
	}
	
	public void setBoolPayload(int index, boolean newBool) {
		if (this.boolPayload != null && index <= this.boolPayload.length)
			this.boolPayload[index] = newBool;
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getBool("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
	}
	
	public int getIntPayload(int index) {
		if (this.intPayload != null && index <= this.intPayload.length)
			return this.intPayload[index];
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getIntPayload("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
		return 0;
	}
	
	public float getFloatPayload(int index) {
		if (this.floatPayload != null && index <= this.floatPayload.length)
			return this.floatPayload[index];
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getFloat("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
		return 0;
	}
	
	public String getStringPayload(int index) {
		if (this.stringPayload != null && index <= this.stringPayload.length)
			return this.stringPayload[index];
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getString("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
		return "null";
	}
	
	public boolean getBoolPayload(int index) {
		if (this.boolPayload != null && index <= this.boolPayload.length)
			return this.boolPayload[index];
		LoggerRedstoneWireless.getInstance(LoggerRedstoneWireless.filterClassName(this.getClass().toString())).write("getBool("+index+"): null or OOB!", LoggerRedstoneWireless.LogLevel.WARNING);
		return false;
	}
	
	public PacketPayload(int intSize, int floatSize, int stringSize, int boolSize) {
		if (intSize > 0) setIntPayload(new int[intSize]);
		if (floatSize > 0) setFloatPayload(new float[floatSize]);
		if (stringSize > 0) setStringPayload(new String[stringSize]);
		if (boolSize > 0) setBoolPayload(new boolean[boolSize]);
	}

	public void append(PacketPayload other) {
		if(other == null)
			return;

		if(other.getIntPayload().length > 0)
			this.setIntPayload(concat(this.getIntPayload(), other.getIntPayload()));
		if(other.getFloatPayload().length > 0)
			this.setFloatPayload(concat(this.getFloatPayload(), other.getFloatPayload()));
		if(other.getStringPayload().length > 0)
			this.setStringPayload(concat(this.getStringPayload(), other.getStringPayload()));
		if(other.getBoolPayload().length > 0)
			this.setBoolPayload(concat(this.getBoolPayload(), other.getBoolPayload()));
	}

	public void append(int[] other) {
		if(other == null || other.length < 0)
			return;

		this.setIntPayload(concat(this.getIntPayload(), other));
	}

	public void splitTail(IndexInPayload index) {
		PacketPayload payload = new PacketPayload(
				getIntPayload().length - index.intIndex,
				getFloatPayload().length - index.floatIndex,
				getStringPayload().length - index.stringIndex,
				getBoolPayload().length - index.boolIndex);

		if(getIntPayload().length > 0)
			System.arraycopy(getIntPayload(), index.intIndex, payload.getIntPayload(), 0, payload.getIntPayload().length);
		if(getFloatPayload().length > 0)
			System.arraycopy(getFloatPayload(), index.floatIndex, payload.getFloatPayload(), 0, payload.getFloatPayload().length);
		if(getStringPayload().length > 0)
			System.arraycopy(getStringPayload(), index.stringIndex, payload.getStringPayload(), 0, payload.getStringPayload().length);
		if(getBoolPayload().length > 0)
			System.arraycopy(getBoolPayload(), index.boolIndex, payload.getBoolPayload(), 0, payload.getBoolPayload().length);
	}

	public int[] getIntPayload() {
		return intPayload;
	}

	public void setIntPayload(int[] intPayload) {
		this.intPayload = intPayload;
	}

	public float[] getFloatPayload() {
		return floatPayload;
	}

	public void setFloatPayload(float[] floatPayload) {
		this.floatPayload = floatPayload;
	}

	public String[] getStringPayload() {
		return stringPayload;
	}

	public void setStringPayload(String[] stringPayload) {
		this.stringPayload = stringPayload;
	}

	public boolean[] getBoolPayload() {
		return boolPayload;
	}

	public void setBoolPayload(boolean[] boolPayload) {
		this.boolPayload = boolPayload;
	}
}
