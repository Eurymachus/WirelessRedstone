/*    
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
package net.minecraft.src.wifiremote;

import net.minecraft.src.EntityPlayer;
import net.minecraft.src.ItemStack;
import net.minecraft.src.ModLoader;
import net.minecraft.src.World;
import net.minecraft.src.mod_WirelessRemote;
import net.minecraft.src.wifi.LoggerRedstoneWireless;
import net.minecraft.src.wifi.RedstoneEther;
import net.minecraft.src.wifi.network.PacketHandlerRedstoneWireless;
import net.minecraft.src.wifiremote.network.PacketHandlerWirelessRemote;

public class ThreadWirelessRemote implements Runnable {
	protected int i;
	protected int j;
	protected int k;
	String freq;
	protected World world;
	protected EntityPlayer player;
	public static int tc = 0;
	
	public ThreadWirelessRemote(EntityPlayer player,String freq) {
		this.i = (int)player.posX;
		this.j = (int)player.posY;
		this.k = (int)player.posZ;
		this.freq = freq;
		this.player = player;
		this.world = player.worldObj;
	}

	@Override
	public void run() {
		tc++;
			ModLoader.getLogger().warning("Frequency: " + this.freq);
			RedstoneEther.getInstance().addTransmitter(
					world,
					i,j,k,
					freq
			);
			if (world.isRemote) PacketHandlerRedstoneWireless.PacketHandlerOutput.sendRedstoneEtherPacket("addTransmitter", i, j, k, freq, false);
	
	    	RedstoneEther.getInstance().setTransmitterState(
					world,
					i,j,k,
					freq,
					true
	    	);
			if (world.isRemote) PacketHandlerRedstoneWireless.PacketHandlerOutput.sendRedstoneEtherPacket("setTransmitter", i, j, k, freq, false);
	    	
	    	if ( WirelessRemote.pulseTime > 0 ) {
				try {
					Thread.sleep(WirelessRemote.pulseTime);
				} catch (InterruptedException e) {
					LoggerRedstoneWireless.getInstance("WirelessRedstone.Remote").writeStackTrace(e);
				}
	    	}
			
			RedstoneEther.getInstance().remTransmitter(
					world,
					i,j,k,
					freq
			);
			if (world.isRemote) PacketHandlerRedstoneWireless.PacketHandlerOutput.sendRedstoneEtherPacket("remTransmitter", i, j, k, freq, false);
		tc--;
	}
	
	private boolean playerChangedPosition(EntityPlayer entityplayer) {
		if ((int)entityplayer.posX == i &&
			(int)entityplayer.posY == j &&
			(int)entityplayer.posZ == k) {
			return false;
		}
		return true;
	}

	public static void pulse(EntityPlayer entityplayer, String freq) {
		if ( tc < WirelessRemote.maxPulseThreads ) {
			Thread thr = new Thread(new ThreadWirelessRemote(entityplayer, freq));
			thr.setName("WirelessRemoteThread");
			thr.start();
		}
	}
}
